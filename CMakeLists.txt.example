cmake_minimum_required(VERSION 3.5.0)
project(helloworld VERSION 0.1.0 LANGUAGES C CXX)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_CXX_STANDARD 20)
# SET(CMAKE_EXE_LINKER_FLAGS  "/FORCE")

include(CTest)
enable_testing()

include_directories(
  "C:\\vcpkg\\installed\\x64-windows\\include"
)
link_directories(
  "C:\\vcpkg\\installed\\x64-windows\\lib"
)

file(GLOB_RECURSE sources src/*.cpp src/*.cc src/*.h src/*.hpp)

# add_executable(server src/server.cpp src/helloworld.pb.cc src/helloworld.grpc.pb.cc)
add_executable(user src/user/user.cpp src/user/user.pb.cc src/user/user.grpc.pb.cc)

find_package(gRPC CONFIG REQUIRED)
# target_link_libraries(server gRPC::gpr gRPC::grpc gRPC::grpc++ gRPC::grpc++_alts)
target_link_libraries(user gRPC::gpr gRPC::grpc gRPC::grpc++ gRPC::grpc++_alts)

find_package(protobuf CONFIG REQUIRED)
# target_link_libraries(server protobuf::libprotoc protobuf::libprotobuf protobuf::libprotobuf-lite)
target_link_libraries(user protobuf::libprotoc protobuf::libprotobuf protobuf::libprotobuf-lite)

find_package(cppzmq CONFIG REQUIRED)
# target_link_libraries(server cppzmq cppzmq-static)
target_link_libraries(user cppzmq cppzmq-static)

find_package(nlohmann_json CONFIG REQUIRED)
target_link_libraries(user nlohmann_json::nlohmann_json)

find_package(libpqxx CONFIG REQUIRED)
target_link_libraries(user libpqxx::pqxx)

set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)
